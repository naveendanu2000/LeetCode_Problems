/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int carry=0;
        ListNode* t1 = l1,* t2 = l2;
        ListNode* head=NULL;
        ListNode* temp=NULL;

        while(t1!=NULL && t2!=NULL){
            carry += t1->val + t2->val;

            ListNode* node = new ListNode;
            node->next = NULL;
            node->val=carry%10;
            carry/=10;
            // cout<<carry<<" "<<node->val<<endl;

            if(head == NULL){
                head = node;
                temp = head;
            }
            else{
                temp->next = node;
                temp = temp->next;
            }
            t1 = t1->next;
            t2 = t2->next;
        }

        if(t1 == NULL){
            while(t2!=NULL){
                carry+=t2->val;
                ListNode* node = new ListNode;
                node->next = NULL;
                node->val=carry%10;
                carry/=10;
                // cout<<sum<<" "<<node->val<<endl;

                if(head == NULL){
                    head = node;
                    temp = head;
                }
                else{
                    temp->next = node;
                    temp = temp->next;
                };
                t2 = t2->next;
            }
        }
        else
        {
            while(t1!=NULL){
                carry+=t1->val;
                ListNode* node = new ListNode;
                node->next = NULL;
                node->val=carry%10;
                carry/=10;
                // cout<<sum<<" "<<node->val<<endl;

                if(head == NULL){
                    head = node;
                    temp = head;
                }
                else{
                    temp->next = node;
                    temp = temp->next;
                }
                t1 = t1->next;
            }
        }
        if(carry>0){
            ListNode* node = new ListNode;
            node->next = NULL;
            node->val=carry;
            temp->next = node;
            temp = temp->next;
        }
        

        return head;
    }
};
