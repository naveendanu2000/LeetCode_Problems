/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        TreeNode* temp = root;
        TreeNode* p_temp = root;
        while(temp!=NULL && temp->val != key){
            if(key < temp->val){
                p_temp = temp;
                temp=temp->left;
            } 
            else{
                p_temp = temp;
                temp=temp->right;
            } 
        }

        if(temp == NULL)    return root;

        TreeNode* inorder;
        TreeNode* p_inorder;
        if(temp->right == NULL && temp->left!=NULL){
            inorder = temp->left;
            p_inorder = temp;
            while(inorder->right!=NULL){
                p_inorder = inorder;
                inorder = inorder->right;
            }

            temp -> val = inorder ->val;
            if(p_inorder == temp)     p_inorder->left= inorder->left;
            else    p_inorder->right= inorder->left;
            delete inorder;
        }
        else if(temp->right != NULL){
            inorder = temp->right;
            p_inorder = temp;
            while(inorder->left!=NULL){
                p_inorder = inorder;
                inorder = inorder->left;
            }

            temp->val = inorder->val;
            if(p_inorder == temp)     p_inorder->right= inorder->right;
            else    p_inorder->left= inorder->right;
            delete inorder;
        }
        else{
            if(p_temp->right == temp)   p_temp->right = NULL;
            else if(p_temp == temp) root = NULL;
            else p_temp->left = NULL;

            delete temp;
        }
        
        return root;
    }
};
