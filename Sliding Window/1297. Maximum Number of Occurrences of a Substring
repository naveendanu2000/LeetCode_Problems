class Solution {
public:
    int maxFreq(string s, int maxLetters, int minSize, int maxSize) 
    {
        int start=0,result=0;
        unordered_map<int,int> count;
        unordered_map<string,int> occurence;
        for(int i=0;i<s.length();i++)
        {
            count[s[i]]++;
            if(i-start+1>minSize)
            {
                if(--count[s[start]]==0)			
                    count.erase(s[start]);
                start++;
            }
            if(i-start+1==minSize&&count.size()<=maxLetters)	
                result=max(result,++occurence[s.substr(start,i-start+1)]);
        }
        return result;
    }
};

//        TLE
//        string win;
//         int i,j,k,max=0;
//         map<string,int> m;
//         for(i=0 ; i<minSize ; i++)
//             win+=s[i];
//         m[win]+=1;
//         for(j=0,k=i;i<s.size();i++,j++){
//             k=i;
//             win.erase(minSize);
//             win.erase(0,1);
//             while(k-i <= maxSize-minSize && k<s.size()){
//                 win+=s[k];
//                 m[win]+=1;
//                 k++;
//             } 
//         }

//         set<char> st;
//         for(auto x:m){
//             if(max<x.second){
//                 for(int z=0 ; z<x.first.size() ;z++){
//                     st.insert(x.first[z]);
//                     if(st.size()>maxLetters)    break;
//                 }
//                 if(st.size()<=maxLetters)  
//                 max = x.second;
//                 st.clear();
//             }
//         }
        
//         return max;
